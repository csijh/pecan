-- A parser for C declarations, building on expressions, after pre-processing
-- and scanning, covering section A.2.2 of the C11 standard.

-- Include the grammar for expressions
{c-expressions.txt}

-- Temporary definitions to make declarations self-contained.
type-name = %TypeName @typeName
initializer-list = %InitializerList @initializerList
static_assert-declaration = %sad @sad
declarator = %idl @idl
initializer = %in @in
alignment-specifier = %as @as
function-specifier = %fs @fs
type-qualifier = %tq @tq
enum-specifier = %es @es
struct-or-union-specifier = %sus @sus
atomic-type-specifier = %ats @ats

declaration =
    declaration-specifiers (init-declarator-list @2declaration)? `;` /
    static_assert-declaration

declaration-specifier =
    storage-class-specifier /
    type-specifier /
    type-qualifier /
    function-specifier /
    alignment-specifier

declaration-specifiers =
    declaration-specifier (declaration-specifier @2declaration-specifiers)*

init-declarator-list =
    init-declarator (`,` init-declarator @2init-declarators)*

init-declarator =
    declarator (`=` initializer @2initialize)?

storage-class-specifier =
    `typedef` @typedef / `extern` @extern / `static` @static /
    `_Thread_local` @threadLocal / `auto` @auto / `register` @register

type-specifier =
    `void` @void / `char` @char / `short` @short / `int` @int / `long` @long /
    `float` @float / `double` @double / `signed` @signed /
    `unsigned` @unsigned / `_Bool` @bool / `_Complex` @complex /
    atomic-type-specifier / struct-or-union-specifier /
    enum-specifier / typedef-name
