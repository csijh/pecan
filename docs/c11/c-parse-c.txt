// A parser for C11, assuming the source has been pre-processed and scanned.
// A second prototype, extended to include declarations.

// ---------- External definitions (C11 standard A.2.4) -----------------------

translation-unit = @0list external-declaration+ ``

// Combine declarations and function definitions to avoid lookahead
external-declaration = declaration-specifiers (
    `;` @1declaration /
    declarator (
        (`=` initializer)? (`,` init-declarator)* `;` @1declaration /
        declaration-list? compound-statement @1definition
    )
)

declaration-list = declaration+

// ---------- Declarations (C11 standard A.2.2) -------------------------------

declaration =
    static_assert-declaration @1declaration /
    declaration-specifiers init-declarator-list? `;` @1declaration

static_assert-declaration =
    `_Static_assert` `(` constant-expression `,` string-literal `)` `;`

declaration-specifiers = declaration-specifier+

declaration-specifier =
    storage-class-specifier /
    type-specifier /
    type-qualifier /
    function-specifier /
    alignment-specifier

init-declarator-list = init-declarator (`,` init-declarator)*
init-declarator = declarator (`=` initializer)?

storage-class-specifier =
    `typedef` / `extern` / `static` /
    `_Thread_local` / `auto` / `register`

type-specifier =
    `void` / `char` / `short` / `int` / `long` / `float` / `double` /
    `signed` / `unsigned` / `_Bool` / `_Complex` /
    atomic-type-specifier /
    struct-or-union-specifier / enum-specifier / typedef-name

atomic-type-specifier =
    `_Atomic` `(` type-name `)`

type-qualifier = `const` / `restrict` / `volatile` / `_Atomic`

function-specifier = `inline` / `_Noreturn`

alignment-specifier =
    `_Alignas` `(` (type-name / constant-expression) `)`

struct-or-union-specifier = struct-or-union (
    identifier (`{` struct-declaration-list `}`)? /
    `{` struct-declaration-list `}`
)

struct-or-union = `struct` / `union`

struct-declaration-list = struct-declaration+

struct-declaration =
    static_assert-declaration /
    specifier-qualifier-list struct-declarator-list? `;`

specifier-qualifier-list = (type-specifier / type-qualifier)+

struct-declarator-list = struct-declarator (`,` struct-declarator)*

struct-declarator =
    declarator (`:` constant-expression)? /
    `:` constant-expression

enum-specifier = `enum` (
    identifier (`{` enumerator-list `,`? `}`)? /
    `{` enumerator-list `,`? `}`
)

enumerator-list = enumerator ((`,` `}`)! `,` enumerator)*

enumerator = enumeration-constant (`=` constant-expression)?

declarator = pointer? direct-declarator

direct-declarator =
    (identifier / `(` declarator `)`) dd-bracket*

dd-bracket =
    `(` dd-parameters? `)` / `[` dd-array-size? `]`

dd-parameters =
    identifier& identifier-list / parameter-type-list

dd-array-size =
    `*` /
    `static` type-qualifier-list? assignment-expression /
    type-qualifier-list dd-simple-array-size? /
    assignment-expression

dd-simple-array-size =
    `*` /
    `static` assignment-expression /
    assignment-expression

pointer = (`*` type-qualifier-list?)+

type-qualifier-list = type-qualifier+

parameter-type-list = parameter-list (`,` `...`)?

parameter-list = parameter-declaration ((`,` `...`)! `,` parameter-declaration)*

parameter-declaration = declaration-specifiers (
    has-identifier& declarator /
    abstract-declarator?
)

has-identifier =
    (`*` / type-qualifier / `(`)* `identifier`

identifier-list = identifier (`,` identifier)*

type-name = specifier-qualifier-list abstract-declarator?

abstract-declarator =
    pointer direct-abstract-declarator? /
    direct-abstract-declarator

direct-abstract-declarator =
    `(` abstract-declarator `)` dad-bracket* / dad-bracket+

dad-bracket =
    `(` parameter-type-list? `)` / `[` dad-array-size? `]`

dad-array-size =
    `*` /
    `static` type-qualifier-list? assignment-expression /
    type-qualifier-list dad-simple-array-size? /
    assignment-expression

dad-simple-array-size =
    assignment-expression / `static` assignment-expression

// ---------- Statements (C11 standard A.2.3) -------------------------------

statement =
    labeled-statement /
    compound-statement /
    expression-statement /
    selection-statement /
    iteration-statement /
    jump-statement

labeled-statement =
    [identifier `:`] statement /
    `case` constant-expression `:` statement /
    `default` `:` statement

// label       ... identifier : ... case const : ... default :
// compound    ... {
// expression  ...
// select      ... if ... switch
// iterate     ... while ... do ... for
// jump        ... goto ... continue ... break ... return

// ---------- Temporary definitions -------------------------------------------

typedef-name = `type`
identifier = `id`
initializer = `init`
compound-statement = `{` `}`
constant-expression = `ce`
assignment-expression = `ae`
enumeration-constant = identifier
string-literal = `"..."`
==========
int;
----------
list
declaration
==========
int id;
----------
list
declaration
==========
int id();
----------
list
declaration
==========
int id() { }
----------
list
definition
