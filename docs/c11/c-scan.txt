-- A scanner for C11. It is assumed that the implementation-defined source
-- character set is Unicode in the UTF-8 encoding, and that the source text has
-- been prepared by converting newlines to \n, expanding trigraphs, splicing
-- lines ending with \, eliding consecutive string literals, and carrying out
-- preprocessing. The definition for enumeration-constant is handled later in
-- c-tokens.txt.

-- A.1.1 Tokens ---------------

tokens = @tokens token* <>

-- String-literals and constants and keywords must come before identifiers.
token =
    gap / comment / constant / string-literal / keyword /
    identifier / punctuator

gap = (' ' / newline / tab / vtab / formfeed)+ @
newline = 10
tab = 9
vtab = 11
formfeed = 12

comment =
    "//" (newline! visible)* @ /
    "/*" ("*/"! visible)* "*/" @
visible = (Cc/Cn/Co/Cs/Zl/Zp)! Uc / newline

-- A.1.2 Keywords -------------

-- Check that keywords aren't followed by letters or digits
k = (identifier-nondigit / digit)!

keyword
= ["alignof" k] @1alignof
/ ["auto" k] @1auto
/ ["break" k] @1break
/ ["case" k] @1case
/ ["char" k] @1char
/ ["const" k] @1const
/ ["continue" k] @1continue
/ ["default" k] @1default
/ ["do" k] @1do
/ ["double" k] @1double
/ ["else" k] @1else
/ ["enum" k] @1enum
/ ["extern" k] @1extern
/ ["float" k] @1float
/ ["for" k] @1for
/ ["goto" k] @1goto
/ ["if" k] @1if
/ ["inline" k] @1inline
/ ["int" k] @1int
/ ["long" k] @1long
/ ["register" k] @1register
/ ["restrict" k] @1restrict
/ ["return" k] @1return
/ ["short" k] @1short
/ ["signed" k] @1signed
/ ["sizeof" k] @1sizeof
/ ["static" k] @1static
/ ["struct" k] @1struct
/ ["switch" k] @1switch
/ ["typedef" k] @1typedef
/ ["union" k] @1union
/ ["unsigned" k] @1unsigned
/ ["void" k] @1void
/ ["volatile" k] @1volatile
/ ["while" k] @1while
/ ["_Alignas" k] @1"_Alignas"
/ ["_Atomic" k] @1"_Atomic"
/ ["_Bool" k] @1"_Bool"
/ ["_Complex" k] @1"_Complex"
/ ["_Generic" k] @1"_Generic"
/ ["_Imaginary" k] @1"_Imaginary"
/ ["_Noreturn" k] @1"_Noreturn"
/ ["_Static_assert" k] @1"_Static_assert"
/ ["_Thread_local" k] @1"_Thread_local"

-- A.1.3 Identifiers ---------------

-- Assume keywords have already been excluded. Include Unicode letters.
identifier =
    identifier-nondigit (identifier-nondigit / digit)* @1identifier

identifier-nondigit = nondigit / universal-character-name / other

nondigit = '_' / 'A..Z' / 'a..z'

digit = '0..9'

other = Lu / Ll / Lt / Lm / Lo

-- A.1.4 Universal character names ----------------

universal-character-name = "\u" hex-quad / "\U" hex-quad hex-quad

hex-quad =
    hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit

-- A.1.5 Constants --------------------

-- Omit enumeration constants.
constant =
    is-float! integer-constant @1constant /
    floating-constant @1constant /
    character-constant @1constant

-- Look ahead to see if a number is floating or not
is-float = "0x" ('.' / hexadecimal-digit+ '.pP') / ('.' / digit+ '.eE')

integer-constant =
    hexadecimal-constant integer-suffix? /
    octal-constant integer-suffix? /
    decimal-constant integer-suffix?

decimal-constant = nonzero-digit digit*

octal-constant = '0' octal-digit*

hexadecimal-constant = hexadecimal-prefix hexadecimal-digit+

hexadecimal-prefix = "0x" / "0X"

nonzero-digit = '123456789'

octal-digit = '01234567'

hexadecimal-digit = '0123456789abcdefABCDEF'

integer-suffix =
    unsigned-suffix (long-long-suffix / long-suffix)? /
    long-long-suffix unsigned-suffix? /
    long-suffix unsigned-suffix?

unsigned-suffix = 'uU'

long-suffix = 'lL'

long-long-suffix = "ll" / "LL"

floating-constant =
    hexadecimal-floating-constant /
    decimal-floating-constant

decimal-floating-constant =
    '.' digit-sequence exponent-part? floating-suffix? /
    digit-sequence ('.' digit-sequence?)? exponent-part? floating-suffix?

hexadecimal-floating-constant = hexadecimal-prefix hex-part1 hex-part2
hex-part1 =
    '.' hexadecimal-digit-sequence /
    hexadecimal-digit-sequence ('.' hexadecimal-digit-sequence?)?
hex-part2 = binary-exponent-part floating-suffix?

-- Fractional constants have been absorbed into the above rules.

exponent-part = 'eE' sign? digit-sequence

sign = '+-'

digit-sequence = digit+

binary-exponent-part = 'pP' sign? digit-sequence

-- Hexadecimal fractional constants have been absorbed into the above rules.
-- Binary exponent parts have been absorbed into the above rules.

hexadecimal-digit-sequence = hexadecimal-digit+

floating-suffix = 'flFL'

-- Enumeration constants have been omitted - they are recognised during parsing.

-- A notation such as "L'" represents a two-character lookahead.
character-constant =
    ("'" / "L'" / "u'" / "U'") c-char-sequence "'"

c-char-sequence = c-char+

c-char = ("'" / '\' / newline)! visible / escape-sequence

escape-sequence =
    simple-escape-sequence / octal-escape-sequence /
    hex-escape-sequence / universal-character-name

simple-escape-sequence =
    "\'" / ["\" '"'] / "\?" / "\\" /
    "\a" / "\b" / "\f" / "\n" / "\r" / "\t" / "\v"

octal-escape-sequence = ["\" octal-digit] (octal-digit octal-digit?)?

hex-escape-sequence = "\x" hexadecimal-digit+

-- A.1.6 String literals -----------------

string-literal =
    [encoding-prefix? '"'] s-char-sequence? '"' @1stringLiteral

encoding-prefix = "u8" / "u" / "U" / "L"

s-char-sequence = s-char+

s-char = ('"' / '\' / newline)! visible / escape-sequence

-- A.1.7 Punctuators -----------------

punctuator
= "%:%:" @1"%:%:"
/ "<<=" @1"<<="
/ ">>=" @1">>="
/ "..." @1"..."
/ "->" @1"->"
/ "++" @1"++"
/ "--" @1"--"
/ "<<" @1"<<"
/ ">>" @1">>"
/ "<=" @1"<="
/ ">=" @1">="
/ "==" @1"=="
/ "!=" @1"!="
/ "&&" @1"&&"
/ "||" @1"||"
/ "*=" @1"*="
/ "/=" @1"/="
/ "%=" @1"%="
/ "+=" @1"+="
/ "-=" @1"-="
/ "&=" @1"&="
/ "^=" @1"^="
/ "|=" @1"|="
/ "##" @1"##"
/ "<:" @1"<:"
/ ":>" @1":>"
/ "<%" @1"<%"
/ "%>" @1"%>"
/ "%:" @1"%:"
/ "[" @1"["
/ "]" @1"]"
/ "(" @1"("
/ ")" @1")"
/ "{" @1"{"
/ "}" @1"}"
/ "." @1"."
/ "&" @1"&"
/ "*" @1"*"
/ "+" @1"+"
/ "-" @1"-"
/ "~" @1"~"
/ "!" @1"!"
/ "/" @1"/"
/ "%" @1"%"
/ "<" @1"<"
/ ">" @1">"
/ "^" @1"^"
/ "|" @1"|"
/ "?" @1"?"
/ ":" @1":"
/ ";" @1";"
/ "=" @1"="
/ "," @1","
/ "#" @1"#"
