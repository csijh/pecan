// A scanner for C11.  It is assumed that the implementation-defined source
// character set is Unicode in the UTF-8 encoding, and that the source text has
// been prepared by converting newlines to \n, expanding trigraphs, splicing
// lines ending with \, eliding consecutive string literals, and carrying out
// preprocessing.

//  ----- A.1.1 Tokens -----

tokens = @tokens token* Uc!

// String-literals and constants and keywords must come before identifiers.
token =
    gap / comment / constant / string-literal /
    keyword / identifier / punctuator

gap = (' ' / newline / tab / vtab / formfeed)+ @
newline = 10
tab = 9
vtab = 11
formfeed = 12

comment =
    "//" (newline! visible)* @ /
    "/*" ("*/"! visible)* "*/" @
visible = (Cc/Cn/Co/Cs/Zl/Zp)! Uc / newline

// ----- A.1.2 Keywords -----

// Check that keyword doesn't continue with this to form an identifier
more = identifier-nondigit / digit

keyword =
    ["alignof" more!] @1alignof /
    ["auto" more!] @1auto /
    ["break" more!] @1break /
    ["case" more!] @1case /
    ["char" more!] @1char /
    ["const" more!] @1const /
    ["continue" more!] @1continue /
    ["default" more!] @1default /
    ["do" more!] @1do /
    ["double" more!] @1double /
    ["else" more!] @1else /
    ["enum" more!] @1enum /
    ["extern" more!] @1extern /
    ["float" more!] @1float /
    ["for" more!] @1for /
    ["goto" more!] @1goto /
    ["if" more!] @1if /
    ["inline" more!] @1inline /
    ["int" more!] @1int /
    ["long" more!] @1long /
    ["register" more!] @1register /
    ["restrict" more!] @1restrict /
    ["return" more!] @1return /
    ["short" more!] @1short /
    ["signed" more!] @1signed /
    ["sizeof" more!] @1sizeof /
    ["static" more!] @1static /
    ["struct" more!] @1struct /
    ["switch" more!] @1switch /
    ["typedef" more!] @1typedef /
    ["union" more!] @1union /
    ["unsigned" more!] @1unsigned /
    ["void" more!] @1void /
    ["volatile" more!] @1volatile /
    ["while" more!] @1while /
    ["_Alignas" more!] @1Alignas /
    ["_Atomic" more!] @1Atomic /
    ["_Bool" more!] @1Bool /
    ["_Complex" more!] @1Complex /
    ["_Generic" more!] @1Generic /
    ["_Imaginary" more!] @1Imaginary /
    ["_Noreturn" more!] @1Noreturn /
    ["_Static_assert" more!] @1StaticAssert /
    ["_Thread_local" more!] @1ThreadLocal

// ----- A.1.3 Identifiers -----

// Assume keywords have already been excluded.  Include Unicode letters.
identifier =
    identifier-nondigit (identifier-nondigit / digit)* @1id

identifier-nondigit = nondigit / universal-character-name / other

nondigit = '_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'

digit = '0123456789'

other = Lu / Ll / Lt / Lm / Lo

// ----- A.1.4 Universal character names -----

universal-character-name = "\u" hex-quad / "\U" hex-quad hex-quad

hex-quad =
    hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit

// ----- A.1.5 Constants -----

// Omit enumeration constants.
constant =
    character-constant / is-float! integer-constant / floating-constant

// Look ahead to see if a number is floating or not
is-float = "0x" ('.' / hexadecimal-digit+ '.pP') / ('.' / digit+ '.eE')

integer-constant =
    hexadecimal-constant integer-suffix? @1hex /
    octal-constant integer-suffix? @1octal /
    decimal-constant integer-suffix? @1decimal

decimal-constant = nonzero-digit digit*

octal-constant = '0' octal-digit*

hexadecimal-constant = hexadecimal-prefix hexadecimal-digit+

hexadecimal-prefix = "0x" / "0X"

nonzero-digit = '123456789'

octal-digit = '01234567'

hexadecimal-digit = '0123456789abcdefABCDEF'

integer-suffix =
    unsigned-suffix (long-long-suffix / long-suffix)? /
    long-long-suffix unsigned-suffix? /
    long-suffix unsigned-suffix?

unsigned-suffix = 'uU'

long-suffix = 'lL'

long-long-suffix = "ll" / "LL"

floating-constant =
    hexadecimal-floating-constant @1hexfloat /
    decimal-floating-constant @1float

decimal-floating-constant =
    '.' digit-sequence exponent-part? floating-suffix? /
    digit-sequence ('.' digit-sequence?)? exponent-part? floating-suffix?

hexadecimal-floating-constant = hexadecimal-prefix hex-part1 hex-part2
hex-part1 =
    '.' hexadecimal-digit-sequence /
    hexadecimal-digit-sequence ('.' hexadecimal-digit-sequence?)?
hex-part2 = binary-exponent-part floating-suffix?

// Fractional constants have been absorbed into the above rules.

exponent-part = 'eE' sign? digit-sequence

sign = '+-'

digit-sequence = digit+

binary-exponent-part = 'pP' sign? digit-sequence

// Hexadecimal fractional constants have been absorbed into the above rules.
// Binary exponent parts have been absorbed into the above rules.

hexadecimal-digit-sequence = hexadecimal-digit+

floating-suffix = 'flFL'

// Enumeration constants have been omitted - they are recognised during parsing.

// A notation such as "L'" represents a two-character lookahead.
character-constant =
    ("'" / "L'" / "u'" / "U'") c-char-sequence "'" @1char

c-char-sequence = c-char+

c-char = ("'" / '\' / newline)! visible / escape-sequence

escape-sequence =
    simple-escape-sequence / octal-escape-sequence /
    hex-escape-sequence / universal-character-name

simple-escape-sequence =
    "\'" / ["\" '"'] / "\?" / "\\" /
    "\a" / "\b" / "\f" / "\n" / "\r" / "\t" / "\v"

octal-escape-sequence = ["\" octal-digit] (octal-digit octal-digit?)?

hex-escape-sequence = "\x" hexadecimal-digit+

// ----- A.1.6 String literals -----

string-literal =
    '"' s-char-sequence? '"' @1string /
    [encoding-prefix '"'] s-char-sequence? '"' @1string

encoding-prefix = "u8" / "u" / "U" / "L"

s-char-sequence = s-char+

s-char = ('"' / '\' / newline)! visible / escape-sequence

// ----- A.1.7 Punctuators -----

punctuator =
    "%:%:" @1hshs /
    "<<=" @1ltlteq /
    ">>=" @1gtgteq /
    "..." @1dtdtdt /
    "->" @1migt /
    "++" @1plpl /
    "--" @1mimi /
    "<<" @1ltlt /
    ">>" @1gtgt /
    "<=" @1lteq /
    ">=" @1gteq /
    "==" @1eqeq /
    "!=" @1emeq /
    "&&" @1amam /
    "||" @1vbvb /
    "*=" @1steq /
    "/=" @1oveq /
    "%=" @1pceq /
    "+=" @1steq /
    "-=" @1mieq /
    "&=" @1ameq /
    "^=" @1hteq /
    "|=" @1vbeq /
    "##" @1hshs /
    "<:" @1os /
    ":>" @1cs /
    "<%" @1oc /
    "%>" @1cc /
    "%:" @1hs /
    "[" @1os /
    "]" @1cs /
    "(" @1or /
    ")" @1cr /
    "{" @1oc /
    "}" @1cc /
    "." @1dt /
    "&" @1am /
    "*" @1st /
    "+" @1pl /
    "-" @1mi /
    "~" @1ti /
    "!" @1em /
    "/" @1ov /
    "%" @1pc /
    "<" @1lt /
    ">" @1gt /
    "^" @1ht /
    "|" @1vb /
    "?" @1qm /
    ":" @1cn /
    ";" @1sc /
    "=" @1eq /
    "," @1co /
    "#" @1hs

// Testing
==========
x // comment
y
----------
tokens
id x
id y
==========
x /*
comment
*/ y
----------
tokens
id x
id y
==========
// String literals: note escaped backslashes in input and expected output
"abc" L"abc" "\\"" "abc\\"xyz"
----------
tokens
string "abc"
string L"abc"
string "\\""
string "abc\\"xyz"
==========
// Keywords and identifiers
int x intx
----------
tokens
int int
id x
id intx
==========
// Punctuators
[](){}+ ++ +++ < << <<< %:%:
----------
tokens
os [
cs ]
or (
cr )
oc {
cc }
pl +
plpl ++
plpl ++
pl +
lt <
ltlt <<
ltlt <<
lt <
hshs %:%:
==========
// Character constants
'a' L'a' '\\''
----------
tokens
char 'a'
char L'a'
char '\\''
==========
// Integer constants
0 4 42 42u 42U 42l 42LL
0123 0128 0x12abCD
----------
tokens
octal 0
decimal 4
decimal 42
decimal 42u
decimal 42U
decimal 42l
decimal 42LL
octal 0123
octal 012
decimal 8
hex 0x12abCD
==========
// Floating constants
0.0 0. .0 1e10 1E10 1.23e10 1e-10 e10
0x0.0p10 0x0.p10 0x.0p10 0x1p10 0x1P10
----------
tokens
float 0.0
float 0.
float .0
float 1e10
float 1E10
float 1.23e10
float 1e-10
id e10
hexfloat 0x0.0p10
hexfloat 0x0.p10
hexfloat 0x.0p10
hexfloat 0x1p10
hexfloat 0x1P10
