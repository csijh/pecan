// A scanner for C11. It is assumed that the implementation-defined source
// character set is Unicode in the UTF-8 encoding, and that the source text has
// been prepared by converting newlines to \n, expanding trigraphs, splicing
// lines ending with \, eliding consecutive string literals, and carrying out
// preprocessing.

//  ----- A.1.1 Tokens -----

tokens = @tokens token* <>

// String-literals and constants and keywords must come before identifiers.
token =
    gap / comment / constant / string-literal / keyword /
    identifier / punctuator

gap = (' ' / newline / tab / vtab / formfeed)+ @
newline = 10
tab = 9
vtab = 11
formfeed = 12

comment =
    "//" (newline! visible)* @ /
    "/*" ("*/"! visible)* "*/" @
visible = (Cc/Cn/Co/Cs/Zl/Zp)! Uc / newline

// ----- A.1.2 Keywords -----

// Check that keywords aren't followed by letters or digits
k = (identifier-nondigit / digit)!

keyword
= ["alignof" k] @1Alignof
/ ["auto" k] @1Auto
/ ["break" k] @1Break
/ ["case" k] @1Case
/ ["char" k] @1Char
/ ["const" k] @1Const
/ ["continue" k] @1Continue
/ ["default" k] @1Default
/ ["do" k] @1Do
/ ["double" k] @1Double
/ ["else" k] @1Else
/ ["enum" k] @1Enum
/ ["extern" k] @1Extern
/ ["float" k] @1Float
/ ["for" k] @1For
/ ["goto" k] @1Goto
/ ["if" k] @1If
/ ["inline" k] @1Inline
/ ["int" k] @1Int
/ ["long" k] @1Long
/ ["register" k] @1Register
/ ["restrict" k] @1Restrict
/ ["return" k] @1Return
/ ["short" k] @1Short
/ ["signed" k] @1Signed
/ ["sizeof" k] @1Sizeof
/ ["static" k] @1Static
/ ["struct" k] @1Struct
/ ["switch" k] @1Switch
/ ["typedef" k] @1Typedef
/ ["union" k] @1Union
/ ["unsigned" k] @1Unsigned
/ ["void" k] @1Void
/ ["volatile" k] @1Volatile
/ ["while" k] @1While
/ ["_Alignas" k] @1Alignas
/ ["_Atomic" k] @1Atomic
/ ["_Bool" k] @1Bool
/ ["_Complex" k] @1Complex
/ ["_Generic" k] @1Generic
/ ["_Imaginary" k] @1Imaginary
/ ["_Noreturn" k] @1Noreturn
/ ["_Static_assert" k] @1StaticAssert
/ ["_Thread_local" k] @1ThreadLocal

// ----- A.1.3 Identifiers -----

// Assume keywords have already been excluded. Include Unicode letters.
identifier =
    identifier-nondigit (identifier-nondigit / digit)* @1identifier

identifier-nondigit = nondigit / universal-character-name / other

nondigit = '_' / 'A..Z' / 'a..z'

digit = '0..9'

other = Lu / Ll / Lt / Lm / Lo

// ----- A.1.4 Universal character names -----

universal-character-name = "\u" hex-quad / "\U" hex-quad hex-quad

hex-quad =
    hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit

// ----- A.1.5 Constants -----

// Omit enumeration constants.
constant =
    character-constant @1constant /
    is-float! integer-constant @1constant /
    floating-constant @1constant

// Look ahead to see if a number is floating or not
is-float = "0x" ('.' / hexadecimal-digit+ '.pP') / ('.' / digit+ '.eE')

integer-constant =
    hexadecimal-constant integer-suffix? /
    octal-constant integer-suffix? /
    decimal-constant integer-suffix?

decimal-constant = nonzero-digit digit*

octal-constant = '0' octal-digit*

hexadecimal-constant = hexadecimal-prefix hexadecimal-digit+

hexadecimal-prefix = "0x" / "0X"

nonzero-digit = '123456789'

octal-digit = '01234567'

hexadecimal-digit = '0123456789abcdefABCDEF'

integer-suffix =
    unsigned-suffix (long-long-suffix / long-suffix)? /
    long-long-suffix unsigned-suffix? /
    long-suffix unsigned-suffix?

unsigned-suffix = 'uU'

long-suffix = 'lL'

long-long-suffix = "ll" / "LL"

floating-constant =
    hexadecimal-floating-constant /
    decimal-floating-constant

decimal-floating-constant =
    '.' digit-sequence exponent-part? floating-suffix? /
    digit-sequence ('.' digit-sequence?)? exponent-part? floating-suffix?

hexadecimal-floating-constant = hexadecimal-prefix hex-part1 hex-part2
hex-part1 =
    '.' hexadecimal-digit-sequence /
    hexadecimal-digit-sequence ('.' hexadecimal-digit-sequence?)?
hex-part2 = binary-exponent-part floating-suffix?

// Fractional constants have been absorbed into the above rules.

exponent-part = 'eE' sign? digit-sequence

sign = '+-'

digit-sequence = digit+

binary-exponent-part = 'pP' sign? digit-sequence

// Hexadecimal fractional constants have been absorbed into the above rules.
// Binary exponent parts have been absorbed into the above rules.

hexadecimal-digit-sequence = hexadecimal-digit+

floating-suffix = 'flFL'

// Enumeration constants have been omitted - they are recognised during parsing.

// A notation such as "L'" represents a two-character lookahead.
character-constant =
    ("'" / "L'" / "u'" / "U'") c-char-sequence "'"

c-char-sequence = c-char+

c-char = ("'" / '\' / newline)! visible / escape-sequence

escape-sequence =
    simple-escape-sequence / octal-escape-sequence /
    hex-escape-sequence / universal-character-name

simple-escape-sequence =
    "\'" / ["\" '"'] / "\?" / "\\" /
    "\a" / "\b" / "\f" / "\n" / "\r" / "\t" / "\v"

octal-escape-sequence = ["\" octal-digit] (octal-digit octal-digit?)?

hex-escape-sequence = "\x" hexadecimal-digit+

// ----- A.1.6 String literals -----

string-literal =
    '"' s-char-sequence? '"' @1stringLiteral /
    [encoding-prefix '"'] s-char-sequence? '"' @1stringLiteral

encoding-prefix = "u8" / "u" / "U" / "L"

s-char-sequence = s-char+

s-char = ('"' / '\' / newline)! visible / escape-sequence

// ----- A.1.7 Punctuators -----

punctuator
= "%:%:" @1PercentColonPercentColon
/ "<<=" @1LessLessEquals
/ ">>=" @1GreaterGreaterEquals
/ "..." @1DotDotDot
/ "->" @1Arrow
/ "++" @1PlusPlus
/ "--" @1MinusMinus
/ "<<" @1LessLess
/ ">>" @1GreaterGreater
/ "<=" @1LessEquals
/ ">=" @1GreaterEquals
/ "==" @1EqualsEquals
/ "!=" @1NotEquals
/ "&&" @1AndAnd
/ "||" @1OrOr
/ "*=" @1StarEquals
/ "/=" @1SlashEquals
/ "%=" @1PercentEquals
/ "+=" @1PlusEquals
/ "-=" @1MinusEquals
/ "&=" @1AndEquals
/ "^=" @1HatEquals
/ "|=" @1OrEquals
/ "##" @1HashHash
/ "<:" @1LessColon
/ ":>" @1ColonGreater
/ "<%" @1LessPercent
/ "%>" @1PercentGreater
/ "%:" @1PercentColon
/ "[" @1OpenS
/ "]" @1CloseS
/ "(" @1OpenR
/ ")" @1CloseR
/ "{" @1OpenC
/ "}" @1CloseC
/ "." @1Dot
/ "&" @1And
/ "*" @1Star
/ "+" @1Plus
/ "-" @1Minus
/ "~" @1Tilde
/ "!" @1Not
/ "/" @1Slash
/ "%" @1Percent
/ "<" @1Less
/ ">" @1Greater
/ "^" @1Hat
/ "|" @1Or
/ "?" @1Query
/ ":" @1Colon
/ ";" @1Semi
/ "=" @1Equals
/ "," @1Comma
/ "#" @1Hash
