// This is the C11 grammar from appendix sections A.1 and A.2 of the standard,
// ignoring all preparation and preprocessor issues, and translated into Pecan
// syntax, except for explicit CFG | choice operators. This is a starting point
// for transformation into a recursive descent Pecan grammar, replacing the |
// operator by the PEG choice operator /.

// A.1.1 Lexical elements

token =
    keyword | identifier | constant | string-literal | punctuator

// A.1.2 Keywords

keyword =
    "alignof"    | "auto"       | "break"      | "case"       | "char"       |
    "const"      | "continue"   | "default"    | "do"         | "double"     |
    "else"       | "enum"       | "extern"     | "float"      | "for"        |
    "goto"       | "if"         | "inline"     | "int"        | "long"       |
    "register"   | "restrict"   | "return"     | "short"      | "signed"     |
    "sizeof"     | "static"     | "struct"     | "switch"     | "typedef"    |
    "union"      | "unsigned"   | "void"       | "volatile"   | "while"      |
    "_Alignas"   | "_Atomic"    | "_Bool"      | "_Complex"   | "_Generic"   |
    "_Imaginary" | "_Noreturn"  | "_Static_assert"            | "_Thread_local"

// A.1.3 Identifiers

identifier =
    identifier-nondigit |
    identifier identifier-nondigit |
    identifier digit

identifier-nondigit =
    nondigit |
    universal-character-name |
    Lu | Ll | Lt | Lm | Lo

nondigit =
    '_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'

digit =
    '0123456789'

// A.1.4 Universal character names

universal-character-name =
    "\u" hex-quad |
    "\U" hex-quad hex-quad

hex-quad =
    hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit

// A.1.5 Constants

constant =
    integer-constant | floating-constant |
    enumeration-constant | character-constant

integer-constant =
    decimal-constant integer-suffix? |
    octal-constant integer-suffix? |
    hexadecimal-constant integer-suffix?

decimal-constant =
    nonzero-digit |
    decimal-constant digit

octal-constant =
    '0' |
    octal-constant octal-digit

hexadecimal-constant =
    hexadecimal-prefix hexadecimal-digit |
    hexadecimal-constant hexadecimal-digit

hexadecimal-prefix =
    "0x" | "0X"

nonzero-digit =
    '123456789'

octal-digit =
    '01234567'

hexadecimal-digit =
    '0123456789abcdefABCDEF'

integer-suffix =
    unsigned-suffix long-suffix? |
    unsigned-suffix long-long-suffix |
    long-suffix unsigned-suffix? |
    long-long-suffix unsigned-suffix?

unsigned-suffix =
    'uU'

long-suffix =
    'lL'

long-long-suffix =
    "ll" | "LL"

floating-constant =
    decimal-floating-constant |
    hexadecimal-floating-constant

decimal-floating-constant =
    fractional-constant exponent-part? floating-suffix? |
    digit-sequence exponent-part floating-suffix?

hexadecimal-floating-constant =
    hexadecimal-prefix hexadecimal-fractional-constant |
    binary-exponent-part floating-suffix? |
    hexadecimal-prefix hexadecimal-digit-sequence |
    binary-exponent-part floating-suffix?

fractional-constant =
    digit-sequence? '.' digit-sequence |
    digit-sequence '.'

exponent-part =
    'e' sign? digit-sequence |
    'E' sign? digit-sequence

sign =
    '+-'

digit-sequence =
    digit |
    digit-sequence digit

hexadecimal-fractional-constant =
    hexadecimal-digit-sequence? `.` |
    hexadecimal-digit-sequence  |
    hexadecimal-digit-sequence `.`

binary-exponent-part =
    `p` sign? digit-sequence  |
    `P` sign? digit-sequence

hexadecimal-digit-sequence =
    hexadecimal-digit  |
    hexadecimal-digit-sequence hexadecimal-digit

floating-suffix =
    'flFL'

enumeration-constant =
    identifier

character-constant =
    "'" c-char-sequence "'" |
    "L'" c-char-sequence "'" |
    "u'" c-char-sequence "'" |
    "U'" c-char-sequence "'"

c-char-sequence =
    c-char |
    c-char-sequence c-char

c-char =
    ("'" | '\' | newline)! visible |
    escape-sequence

escape-sequence =
    simple-escape-sequence |
    octal-escape-sequence |
    hexadecimal-escape-sequence |
    universal-character-name

simple-escape-sequence =
    "\'" | "\" '"' | "\?" | "\\" |
    "\a" | "\b" | "\f" | "\n" | "\r" | "\t" | "\v"

octal-escape-sequence =
    '\' octal-digit |
    '\' octal-digit octal-digit |
    '\' octal-digit octal-digit octal-digit |

hexadecimal-escape-sequence =
    "\x" hexadecimal-digit |
    hexadecimal-escape-sequence hexadecimal-digit

// A.1.6 String literals

string-literal =
    encoding-prefix? '"' s-char-sequence? '"'

encoding-prefix =
    "u8" | "u" | "U" | "L"

s-char-sequence =
    s-char |
    s-char-sequence s-char

s-char =
    ('"' / '\' / newline)! visible |
    escape-sequence

// A.1.7 Punctuators

punctuator =
    "["  | "]"  | "("  | ")"   | "{"  | "}"  | "."  | "->" |
    "++" | "--" | "&"  | "*"   | "+"  | "-"  | "~"  | "!"  |
    "/"  | "%"  | "<<" | ">>"  | "<"  | ">"  | "<=" | ">=" | "==" | "!=" | "^"  | "|"  | "&&"  | "||" |
    "?"  | ":"  | ";"  | "..." |
    "="  | "*=" | "/=" | "%="  | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" |
    ","  | "#"  | "##" |
    "<:" | ":>" | "<%" | "%>"  | "%:" | "%:%:"

// A.2.1 Expressions

primary-expression =
    identifier |
    constant |
    string-literal |
    "(" expression ")" |
    generic-selection

generic-selection =
    "_Generic" "(" assignment-expression "," generic-assoc-list ")"

generic-assoc-list =
    generic-association |
    generic-assoc-list "," generic-association

generic-association =
    type-name ":" assignment-expression |
    default ":" assignment-expression

postfix-expression =
    primary-expression |
    postfix-expression "[" expression "]" |
    postfix-expression "(" argument-expression-list? ")" |
    postfix-expression "." identifier |
    postfix-expression "->" identifier |
    postfix-expression "++" |
    postfix-expression "--" |
    "(" type-name ")" "{" initializer-list "}" |
    "(" type-name ")" "{" initializer-list "," "}" |

argument-expression-list =
    assignment-expression |
    argument-expression-list "," assignment-expression

unary-expression =
    postfix-expression |
    "++" unary-expression |
    "--" unary-expression |
    unary-operator cast-expression |
    "sizeof" unary-expression |
    "sizeof" "(" type-name ")" |
    "alignof" "(" type-name ")" |

unary-operator = one of
    '&*+-~!'

cast-expression =
    unary-expression |
    "(" type-name ")" cast-expression

multiplicative-expression =
    cast-expression |
    multiplicative-expression "*" cast-expression |
    multiplicative-expression "/" cast-expression |
    multiplicative-expression "%" cast-expression

additive-expression =
    multiplicative-expression |
    additive-expression "+" multiplicative-expression |
    additive-expression "-" multiplicative-expression

shift-expression =
    additive-expression |
    shift-expression "<<" additive-expression |
    shift-expression ">>" additive-expression

relational-expression =
    shift-expression |
    relational-expression "<" shift-expression |
    relational-expression ">" shift-expression |
    relational-expression "<=" shift-expression |
    relational-expression ">=" shift-expression

equality-expression =
    relational-expression |
    equality-expression "==" relational-expression |
    equality-expression "!=" relational-expression

AND-expression =
    equality-expression |
    AND-expression "&" equality-expression

exclusive-OR-expression =
    AND-expression |
    exclusive-OR-expression "^" AND-expression

inclusive-OR-expression =
    exclusive-OR-expression |
    inclusive-OR-expression "|" exclusive-OR-expression

logical-AND-expression =
    inclusive-OR-expression |
    logical-AND-expression "&&" inclusive-OR-expression

logical-OR-expression =
    logical-AND-expression |
    logical-OR-expression "||" logical-AND-expression

conditional-expression =
    logical-OR-expression |
    logical-OR-expression "?" expression ":" conditional-expression

assignment-expression =
    conditional-expression |
    unary-expression assignment-operator assignment-expression

assignment-operator =
    "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|="

expression =
    assignment-expression |
    expression "," assignment-expression

constant-expression =
    conditional-expression

// A.2.2 Declarations

declaration =
    declaration-specifiers init-declarator-list? ";" |
    static_assert-declaration |

declaration-specifiers =
    storage-class-specifier declaration-specifiers? |
    type-specifier declaration-specifiers? |
    type-qualifier declaration-specifiers? |
    function-specifier declaration-specifiers? |
    alignment-specifier declaration-specifiers?

init-declarator-list =
    init-declarator |
    init-declarator-list "," init-declarator

init-declarator =
    declarator |
    declarator = initializer

storage-class-specifier =
    "typedef" |
    "extern" |
    "static" |
    "_Thread_local" |
    "auto" |
    "register"

type-specifier =
    "void" |
    "char" |
    "short" |
    "int" |
    "long" |
    "float" |
    "double" |
    "signed" |
    "unsigned" |
    "_Bool" |
    "_Complex" |
    atomic-type-specifier |
    struct-or-union-specifier |
    enum-specifier |
    typedef-name

struct-or-union-specifier =
    struct-or-union identifier? "{" struct-declaration-list "}" |
    struct-or-union identifier

struct-or-union =
    "struct" |
    "union"

struct-declaration-list =
    struct-declaration |
    struct-declaration-list struct-declaration

struct-declaration =
    specifier-qualifier-list struct-declarator-list? ";" |
    static_assert-declaration |

specifier-qualifier-list =
    type-specifier specifier-qualifier-list? |
    type-qualifier specifier-qualifier-list?

struct-declarator-list =
    struct-declarator |
    struct-declarator-list "," struct-declarator

struct-declarator =
    declarator |
    declarator? ":" constant-expression

enum-specifier =
    enum identifier? "{" enumerator-list "}" |
    enum identifier? "{" enumerator-list "," "}" |
    enum identifier

enumerator-list =
    enumerator |
    enumerator-list "," enumerator

enumerator =
    enumeration-constant |
    enumeration-constant = constant-expression

atomic-type-specifier =
    "_Atomic" "(" type-name ")"

type-qualifier =
    "const" |
    "restrict" |
    "volatile" |
    "_Atomic"

function-specifier =
    "inline" |
    "_Noreturn"

alignment-specifier =
    "_Alignas" "(" type-name ")" |
    "_Alignas" "(" constant-expression ")"

declarator =
    pointer? direct-declarator

direct-declarator =
    identifier |
    "(" declarator ")" |
    direct-declarator "[" type-qualifier-list? assignment-expression? "]" |
    direct-declarator "[" static type-qualifier-list? assignment-expression "]" |
    direct-declarator "[" type-qualifier-list static assignment-expression "]" |
    direct-declarator "[" type-qualifier-list? * "]" |
    direct-declarator "(" parameter-type-list ")" |
    direct-declarator "(" identifier-list? ")"

pointer =
    "*" type-qualifier-list? |
    "*" type-qualifier-list? pointer

type-qualifier-list =
    type-qualifier |
    type-qualifier-list type-qualifier

parameter-type-list =
    parameter-list |
    parameter-list "," "..."

parameter-list =
    parameter-declaration |
    parameter-list "," parameter-declaration

parameter-declaration =
    declaration-specifiers declarator |
    declaration-specifiers abstract-declarator?

identifier-list =
    identifier |
    identifier-list "," identifier

type-name =
    specifier-qualifier-list abstract-declarator?

abstract-declarator =
    pointer |
    pointer? direct-abstract-declarator

direct-abstract-declarator =
    "(" abstract-declarator ")" |
    direct-abstract-declarator? "[" type-qualifier-list? |
    assignment-expression? "]" |
    direct-abstract-declarator? "[" static type-qualifier-list? |
    assignment-expression "]" |
    direct-abstract-declarator? "[" type-qualifier-list static |
    assignment-expression "]" |
    direct-abstract-declarator? "[" "*" "]" |
    direct-abstract-declarator? "(" parameter-type-list? ")"

typedef-name =
    identifier

initializer =
    assignment-expression |
    "{" initializer-list "}" |
    "{" initializer-list "," "}"

initializer-list =
    designation? initializer |
    initializer-list "," designation? initializer

designation =
    designator-list ":"

designator-list =
    designator |
    designator-list designator

designator =
    "[" constant-expression "]" |
    "." identifier

static_assert-declaration =
    "_Static_assert" "(" constant-expression "," string-literal ")" ";"

// A.2.3 Statements

statement =
    labeled-statement |
    compound-statement |
    expression-statement |
    selection-statement |
    iteration-statement |
    jump-statement

labeled-statement =
    identifier ":" statement |
    case constant-expression ":" statement |
    default ":" statement

compound-statement =
    "{" block-item-list? "}"

block-item-list =
    block-item |
    block-item-list block-item

block-item =
    declaration |
    statement

expression-statement =
    expression? ";"

selection-statement =
    if "(" expression ")" statement |
    if "(" expression ")" statement else statement |
    switch "(" expression ")" statement

iteration-statement =
    while "(" expression ")" statement |
    do statement while "(" expression ")" ";" |
    for "(" expression? ";" expression? ";" expression? ")" statement |
    for "(" declaration expression? ";" expression? ")" statement

jump-statement =
    "goto" identifier ";" |
    "continue" ";" |
    "break" ";" |
    "return" expression? ";"

// A.2.4 External definitions

translation-unit =
    external-declaration |
    translation-unit external-declaration

external-declaration =
    function-definition |
    declaration

function-definition =
    declaration-specifiers declarator declaration-list? compound-statement

declaration-list =
    declaration |
    declaration-list declaration
