// A Pecan grammar for the Pecan language itself, with tests.

// A grammar is a sequence of rules, possibly with inclusions.
pecan = skip rules #end <>
rules = (inclusion / rule) (rules @2list)?
inclusion = string newline @1include skip
rule = #id (id / backquote) equals expression newline @2rule skip

// An expression breaks down into terms, factors and atoms.
expression = term (slash expression @2or)?
term = factor (term @2and)?
factor = #atom atom postops
postops = postop*
postop = opt @2opt / any @2any / some @2some / has @2has / not @2not
atom = bracketed / try / id / backquote / act / mark / tag /
    codes / code / range / set / string / split / category

// Atoms. Categories and ids are made mutually exclusive.
// Brackets produce output items, to help with text ranges of parse tree nodes.
bracketed = open expression close @3bracketed
try = sopen expression sclose @3try
id = (cat alpha!)! letter alphas @id blank
backquote = "`" nobquotes #quote "`" @id blank
act = '@' decimals alphas @act blank
mark = "#" initial alphas @mark blank
tag = "%" initial alphas @tag blank
codes = [digits '.'] #dot '.' digits @range blank
code = digits @code blank
range = ["'" noquote ".."] noquote "'" @range blank
set = "'" noquotes #quote "'" @set blank
string = '"' nodquotes #quote '"' @string blank
split = '<' noangles #gt '>' @split blank
equals = #equals "=" gap
slash = #operator "/" gap
has = "&" @op blank
not = "!" @op blank
opt = "?" @op blank
any = "*" @op blank
some = "+" @op blank
open = "(" @bracket gap
sopen = "[" @bracket gap
close = #bracket ")" @bracket blank
sclose = #bracket "]" @bracket blank
category = [cat alpha!] @cat blank
cat = "Uc" / "Cc" / "Cf" / "Cn" / "Co" / "Cs" / "Ll" / "Lm" / "Lo" / "Lt" /
    "Lu" / "Mc" / "Me" / "Mn" / "Nd" / "Nl" / "No" / "Pc" / "Pd" / "Pe" /
    "Pf" / "Pi" / "Po" / "Ps" / "Sc" / "Sk" / "Sm" / "So" / "Zl" / "Zp" / "Zs"

// Rules for white space and continuations. A blank is after =/([ and a gap is
// after atom or &!?*+)] and a skip is after a rule.
blank = spaces [endline spaces '=/)]' &]? @
gap = spaces (newline spaces)? @
skip = ((space / comment / newline) @)*
comment = "--" visibles newline
newline = #newline endline @

// Rules for character sets.
space = ' '
spaces = space*
visible = (Cc/Cn/Co/Cs/Zl/Zp)! Uc
visibles = visible*
alpha = letter / Nd / '_' / '-'
alphas = alpha*
letter = Lu / Ll / Lt / Lm / Lo
initial = #letter letter

decimal = '0..9'
decimals = decimal*
hex = decimal / 'ABCDEFabcdef'
hexes = hex*
digits = ('1..9' decimals) / '0' hexes
noquote = "'"! visible
noquotes = ("'"! visible)*
nodquotes = ('"'! visible)*
nobquotes = ("`"! visible)*
noangles = ('>'! visible)*
endline = 13? 10
==========
-- Single rule
x = y
----------
id x
id y
rule
==========
-- Inclusion
"other.txt"
x = y
----------
string "other.txt"
include
id x
id y
rule
list
==========
-- Choice
x = y / z
----------
id x
id y
id z
or
rule
==========
-- Bracket
x = (y / z)
----------
id x
bracket (
id y
id z
or
bracket )
bracketed
rule
==========
-- Empty grammar
----------
Error on line 2: expecting id, newline

^
==========
-- Expecting =
x
----------
Error on line 2: expecting equals
x
 ^
==========
-- Two rules, normal \n line endings
x = x
y = y
---------
id x
id x
rule
id y
id y
rule
list
==========
-- Windows \r\n line endings
x=x\13\10\
y=y\13\10\
----------
id x
id x
rule
id y
id y
rule
list
==========
-- Blank lines


x = x
----------
id x
id x
rule
==========
-- Trailing spaces
x = x    \10
         \10
y = y    \10
----------
id x
id x
rule
id y
id y
rule
list
==========
-- Trailing blank lines
x = x
y = y


----------
id x
id x
rule
id y
id y
rule
list
==========
-- No final newline
x = x
y = y\
----------
Error on line 3: expecting atom, newline, operator
y = y
     ^
==========
-- No final newline
x = x
-- comment\
----------
Error on line 3: expecting newline
-- comment
          ^
==========
-- Varied comments and empty lines
-- initial comment

x = y

-- middle comment
y = z

-- end comment
----------
id x
id y
rule
id y
id z
rule
list
==========
-- Illegal end of line comment
x = y -- comment
----------
Error on line 2: expecting atom, newline, operator
x = y -- comment
      ^
==========
-- Unexpected character
x = |y|
----------
Error on line 2: expecting atom, newline
x = |y|
    ^
==========
-- Incomplete string
x = "abc
----------
Error on line 2: expecting quote
x = "abc
        ^
==========
-- Incomplete set
x = 'abc
----------
Error on line 2: expecting quote
x = 'abc
        ^
==========
-- Expecting atom
x = /
----------
Error on line 2: expecting atom, newline
x = /
    ^
==========
-- Missing close bracket
x = (y
y = z
----------
Error on line 2: expecting atom, bracket, operator
x = (y
      ^
==========
-- Dot in the wrong place
x = .
----------
Error on line 2: expecting atom, newline
x = .
    ^
==========
-- Incomplete dot dot
x = 0.
----------
Error on line 2: expecting dot
x = 0.
      ^
==========
-- Discard action
x = @3
----------
id x
act @3
rule
==========
-- Long id and id extending category name
longIdentifier = longIdentifier
x = Ndx
----------
id longIdentifier
id longIdentifier
rule
id x
id Ndx
rule
list
==========
-- Definition of category
Nd = "x"
----------
Error on line 2: expecting id, newline
Nd = "x"
^
==========
-- Tag
x = %x
----------
id x
tag %x
rule
==========
-- Bad tag
x = %
----------
Error on line 2: expecting letter
x = %
     ^
==========
-- Marker
x = #m
----------
id x
mark #m
rule
==========
-- Bad marker
x = 'x' #3
----------
Error on line 2: expecting letter
x = 'x' #3
         ^
==========
-- Brackets
exp = (exp) end
exp = [exp] end
----------
id exp
bracket (
id exp
bracket )
bracketed
id end
and
rule
id exp
bracket [
id exp
bracket ]
try
id end
and
rule
list
==========
-- Continuation lines
x =
y /
z
x =
(
a) [
c]
x
= y
/ z
x
= y (a
) [c
]
----------
id x
id y
id z
or
rule
id x
bracket (
id a
bracket )
bracketed
bracket [
id c
bracket ]
try
and
rule
id x
id y
id z
or
rule
id x
id y
bracket (
id a
bracket )
bracketed
bracket [
id c
bracket ]
try
and
and
rule
list
list
list
==========
-- The + * ? postfix operators
exp = exp* exp+ exp? end
----------
id exp
id exp
op *
any
id exp
op +
some
id exp
op ?
opt
id end
and
and
and
rule
==========
-- Ranges
r1 = 0..127
r2 = 'a..z'
----------
id r1
range 0..127
rule
id r2
range 'a..z'
rule
list
==========
-- Backquote id
`x` = "abc"
----------
id `x`
string "abc"
rule
==========
-- Error marker
assignment = left #equals "=" right
----------
id assignment
id left
mark #equals
string "="
id right
and
and
and
rule
==========
-- Double operator
x = y /
z / /
----------
Error on line 3: expecting atom, newline
z / /
    ^
==========
-- Actions, tests, codes and errors
x = %x @0x @1x @ @x
y = 0 1 2 10 12 123
z = 0ffff 01ABCDEF23 0FG
u = #err ''
----------
id x
tag %x
act @0x
act @1x
act @
act @x
and
and
and
and
rule
id y
code 0
code 1
code 2
code 10
code 12
code 123
and
and
and
and
and
rule
id z
code 0ffff
code 01ABCDEF23
code 0F
id G
and
and
and
rule
id u
mark #err
set ''
and
rule
list
list
list
==========
-- Unicode letters and digits in identifiers, maximum codes
x = abc\960
y = d123\1636
z = 1114111 / 0ffff
----------
id x
id abc\960
rule
id y
id d123\1636
rule
id z
code 1114111
code 0ffff
or
rule
list
list
==========
-- Strings, character sets, unicode
x = "abc" " !#$%^&*()_-=+[]`{};:'@#~"
y = 'abc' ' !#$%^&*()_-=+[]`{};:"@#~'
pi = "\960"
----------
id x
string "abc"
string " !#$%^&*()_-=+[]`{};:'@#~"
and
rule
id y
set 'abc'
set ' !#$%^&*()_-=+[]`{};:"@#~'
and
rule
id pi
string "\960"
rule
list
list
==========
-- Brackets and operators
x = (y / z) / y?
x = (y/z)+ / y*
x = y z w ! / y
x = [y z] / w
----------
id x
bracket (
id y
id z
or
bracket )
bracketed
id y
op ?
opt
or
rule
id x
bracket (
id y
id z
or
bracket )
bracketed
op +
some
id y
op *
any
or
rule
id x
id y
id z
id w
op !
not
and
and
id y
or
rule
id x
bracket [
id y
id z
and
bracket ]
try
id w
or
rule
list
list
list
==========
-- Dividers
keyword = <do> keyword1 / keyword2
keyword1 = "break" / "case" / "catch" / "continue" / "default"
keyword2 = "do" / "else" / "for" / "if" / "switch" / "while"
----------
id keyword
split <do>
id keyword1
and
id keyword2
or
rule
id keyword1
string "break"
string "case"
string "catch"
string "continue"
string "default"
or
or
or
or
rule
id keyword2
string "do"
string "else"
string "for"
string "if"
string "switch"
string "while"
or
or
or
or
or
rule
list
list
==========
-- End of input
end = #end <>
----------
id end
mark #end
split <>
and
rule
==========
-- Underscore
a_b = xy_
----------
id a_b
id xy_
rule
==========
-- Hyphen
a-b = xy-
----------
id a-b
id xy-
rule
==========
-- Single backslash in quotes (escaped using test file conventions)
bs = '\\n' "\\n"
----------
id bs
set '\\n'
string "\\n"
and
rule
