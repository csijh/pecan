-- A Pecan grammar for the Pecan language itself.

-- A grammar is a sequence of rules, possibly with inclusions.
pecan = skip rules #end <>
rules = (inclusion / rule) (rules / @empty) @2list
inclusion = include newline @1include skip
rule = #id id equals expression newline @2rule skip

-- An expression breaks down into terms, factors and atoms.
expression = term (slash expression @2or)?
term = factor (term @2and)?
factor = #atom atom postop*
postop = opt @2opt / any @2any / some @2some / has @2has / not @2not
atom = bracketed / see / act / mark / tag / split / range / set /
    string / category / id

-- Atoms. Categories and ids are made mutually exclusive.
-- Brackets produce output items, to help with text ranges of parse tree nodes.
bracketed = open expression close @3bracketed
see = sopen expression sclose @3see
id = (cat alpha!)! name @id blank
act = '@' '0..9'* name? @act blank
mark = "#" #name name @mark blank
tag = "%" #name name @tag blank
range = ["'" noquote ".."] noquote #quote "'" @range blank
set = "'" noquotes #quote "'" @set blank
string = '"' nodquotes #quote '"' @string blank
split = '<' noangles #gt '>' @split blank
include = "{" nocurlies #bracket "}" @string blank
equals = #equals "=" gap
slash = #operator "/" gap
has = "&" @postop blank
not = "!" @postop blank
opt = "?" @postop blank
any = "*" @postop blank
some = "+" @postop blank
open = "(" @bracket gap
sopen = "[" @bracket gap
close = #bracket ")" @bracket blank
sclose = #bracket "]" @bracket blank
category = [cat alpha!] @cat blank
cat = "Uc" / "Cc" / "Cf" / "Cn" / "Co" / "Cs" / "Ll" / "Lm" / "Lo" / "Lt" /
    "Lu" / "Mc" / "Me" / "Mn" / "Nd" / "Nl" / "No" / "Pc" / "Pd" / "Pe" /
    "Pf" / "Pi" / "Po" / "Ps" / "Sc" / "Sk" / "Sm" / "So" / "Zl" / "Zp" / "Zs"

-- Rules for white space and continuations. A blank is after =/([ and a gap is
-- after atom or &!?*+)] and a skip is after a rule.
blank = spaces [endline spaces '=/)]' &]? @
gap = spaces (newline spaces)? @
skip = ((space / comment / newline) @)*
comment = "--" visible* newline
newline = #newline endline @

-- Rules for character sets and sequences.
space = ' '
spaces = space*
literal = escape / visible
literals = literal*
visible = (Cc/Cn/Co/Cs/Zl/Zp)! Uc
escape = backslash (digits / 'bfnrt"\39\92')
backslash = '\92'
alpha = letter / Nd / '-' / '_'
alphas = alpha*
letter = Lu / Ll / Lt / Lm / Lo
name = letter alphas / '`' nobquotes #quote '`'
hex = '0..9' / 'ABCDEFabcdef'
hexes = hex*
digits = ('1..9' '0..9'*) / '0' hexes
noquote = "'"! literal
noquotes = noquote*
nodquotes = ('"'! literal)*
nobquotes = ('`'! literal)*
noangles = ('>'! literal)*
nocurlies = ('}'! literal)*
endline = '\13'? '\10'
