// Removed (a) categories (b) inclusions (c) backquotes (d) hex
// Made suitable for pecan-paper.

// Pecan grammar for Pecan grammars: rules
grammar = skip rules #end <>
rules = rule (rules @2list)?
rule = #id id equals expression newline @2rule skip

// Expressions
expression = term (slash expression @2or)?
term = factor (term @2and)?
factor = #atom atom (repeat / lookahead)*
repeat = opt @2opt / any @2any / some @2some
lookahead = has @2has / not @2not
atom = bracketed / try / id / act / mark / tag /
    codes / code / range / set / string / split

// Atoms
bracketed = open expression close @3bracketed
try = sopen expression sclose @3try
id = letter alpha* @id blank
act = '@' digits? alpha* @act blank
mark = "#" initial alpha* @mark blank
tag = "%" initial alpha* @tag blank
codes = [digits '.'] #dot '.' digits @codes blank
code = digits @code blank
range = ["'" noquote ".."] noquote #quote "'" @range blank
set = "'" noquote* #quote "'" @set blank
string = '"' nodquote* #quote '"' @string blank
split = '<' noangle* #gt '>' @split blank
equals = #equals "=" gap
slash = #operator "/" gap
has = "&" @op blank
not = "!" @op blank
opt = "?" @op blank
any = "*" @op blank
some = "+" @op blank
open = "(" @bracket gap
sopen = "[" @bracket gap
close = #bracket ")" @bracket blank
sclose = #bracket "]" @bracket blank

// White space and continuations.
blank = space* [endline space* '=/)]' &]? @
gap = space* (newline space*)? @
skip = (space / comment / newline)* @
comment = "--" visible* newline
newline = #newline endline @

// Character sets.
space = ' '
visible = ' ..~'
alpha = letter / '0..9' / '_' / '-'
initial = #letter letter
letter = 'a..z' / 'A..Z'
digits = '0' / ('1..9' '0..9'*)
noquote = "'"! visible
nodquote = '"'! visible
noangle = '>'! visible
endline = 13? 10

==========
-- Single rule
x = y
----------
id x
id y
rule
==========
-- Choice
x = y / z
----------
id x
id y
id z
or
rule
==========
-- Bracket
x = (y / z)
----------
id x
bracket (
id y
id z
or
bracket )
bracketed
rule
==========
-- Empty grammar
----------
Error on line 2: expecting id, newline

^
==========
-- Expecting =
x
----------
Error on line 2: expecting equals
x
 ^
==========
-- Two rules, normal \n line endings
x = x
y = y
---------
id x
id x
rule
id y
id y
rule
list
==========
-- Windows \r\n line endings
x=x\13\10\
y=y\13\10\
----------
id x
id x
rule
id y
id y
rule
list
==========
-- Blank lines


x = x
----------
id x
id x
rule
==========
-- Trailing spaces
x = x    \10
         \10
y = y    \10
----------
id x
id x
rule
id y
id y
rule
list
==========
-- Trailing blank lines
x = x
y = y


----------
id x
id x
rule
id y
id y
rule
list
==========
-- No final newline
x = x
y = y\
----------
Error on line 3: expecting atom, newline, operator
y = y
     ^
==========
-- No final newline
x = x
-- comment\
----------
Error on line 3: expecting newline
-- comment
          ^
==========
-- Varied comments and empty lines
-- initial comment

x = y

-- middle comment
y = z

-- end comment
----------
id x
id y
rule
id y
id z
rule
list
==========
-- Illegal end of line comment
x = y -- comment
----------
Error on line 2: expecting atom, newline, operator
x = y -- comment
      ^
==========
-- Unexpected character
x = |y|
----------
Error on line 2: expecting atom, newline
x = |y|
    ^
==========
-- Incomplete string
x = "abc
----------
Error on line 2: expecting quote
x = "abc
        ^
==========
-- Incomplete set
x = 'abc
----------
Error on line 2: expecting quote
x = 'abc
        ^
==========
-- Expecting atom
x = /
----------
Error on line 2: expecting atom, newline
x = /
    ^
==========
-- Missing close bracket
x = (y
y = z
----------
Error on line 2: expecting atom, bracket, operator
x = (y
      ^
==========
-- Dot in the wrong place
x = .
----------
Error on line 2: expecting atom, newline
x = .
    ^
==========
-- Incomplete dot dot
x = 0.
----------
Error on line 2: expecting dot
x = 0.
      ^
==========
-- Drop input and output items.
x = @3
----------
id x
act @3
rule
==========
-- Long id and id extending category name
longIdentifier = longIdentifier
x = Ndx
----------
id longIdentifier
id longIdentifier
rule
id x
id Ndx
rule
list
==========
-- Tag
x = %x
----------
id x
tag %x
rule
==========
-- Bad tag
x = %
----------
Error on line 2: expecting letter
x = %
     ^
==========
-- Marker
x = #m
----------
id x
mark #m
rule
==========
-- Bad marker
x = 'x' #3
----------
Error on line 2: expecting letter
x = 'x' #3
         ^
==========
-- Brackets
exp = (exp) end
exp = [exp] end
----------
id exp
bracket (
id exp
bracket )
bracketed
id end
and
rule
id exp
bracket [
id exp
bracket ]
try
id end
and
rule
list
==========
-- Continuation lines
x =
y /
z
x =
(
a) [
c]
x
= y
/ z
x
= y (a
) [c
]
----------
id x
id y
id z
or
rule
id x
bracket (
id a
bracket )
bracketed
bracket [
id c
bracket ]
try
and
rule
id x
id y
id z
or
rule
id x
id y
bracket (
id a
bracket )
bracketed
bracket [
id c
bracket ]
try
and
and
rule
list
list
list
==========
-- The + * ? postfix operators
exp = exp* exp+ exp? end
----------
id exp
id exp
op *
any
id exp
op +
some
id exp
op ?
opt
id end
and
and
and
rule
==========
-- Ranges
r1 = 0..127
r2 = 'a..z'
----------
id r1
codes 0..127
rule
id r2
range 'a..z'
rule
list
==========
-- Error marker
assignment = left #equals "=" right
----------
id assignment
id left
mark #equals
string "="
id right
and
and
and
rule
==========
-- Double operator
x = y /
z / /
----------
Error on line 3: expecting atom, newline
z / /
    ^
==========
-- Actions, tests, codes and errors
x = %x @0x @1x @ @x
y = 0 1 2 10 12 123
u = #err ''
----------
id x
tag %x
act @0x
act @1x
act @
act @x
and
and
and
and
rule
id y
code 0
code 1
code 2
code 10
code 12
code 123
and
and
and
and
and
rule
id u
mark #err
set ''
and
rule
list
list
==========
-- Strings, character sets
x = "abc" " !#$%^&*()_-=+[]`{};:'@#~"
y = 'abc' ' !#$%^&*()_-=+[]`{};:"@#~'
----------
id x
string "abc"
string " !#$%^&*()_-=+[]`{};:'@#~"
and
rule
id y
set 'abc'
set ' !#$%^&*()_-=+[]`{};:"@#~'
and
rule
list
==========
-- Brackets and operators
x = (y / z) / y?
x = (y/z)+ / y*
x = y z w ! / y
x = [y z] / w
----------
id x
bracket (
id y
id z
or
bracket )
bracketed
id y
op ?
opt
or
rule
id x
bracket (
id y
id z
or
bracket )
bracketed
op +
some
id y
op *
any
or
rule
id x
id y
id z
id w
op !
not
and
and
id y
or
rule
id x
bracket [
id y
id z
and
bracket ]
try
id w
or
rule
list
list
list
==========
-- Dividers
keyword = <..de> keyword1 / keyword2
keyword1 = "break" / "case" / "catch" / "continue" / "default"
keyword2 = "do" / "else" / "for" / "if" / "switch" / "while"
----------
id keyword
split <..de>
id keyword1
and
id keyword2
or
rule
id keyword1
string "break"
string "case"
string "catch"
string "continue"
string "default"
or
or
or
or
rule
id keyword2
string "do"
string "else"
string "for"
string "if"
string "switch"
string "while"
or
or
or
or
or
rule
list
list
==========
-- End of input
end = #end <>
----------
id end
mark #end
split <>
and
rule
==========
-- Underscore
a_b = xy_
----------
id a_b
id xy_
rule
==========
-- Hyphen
a-b = xy-
----------
id a-b
id xy-
rule
==========
-- Single backslash in quotes (escaped using test file conventions)
bs = '\\n' "\\n"
----------
id bs
set '\\n'
string "\\n"
and
rule
