-- Pecan grammar for Pecan grammars.
-- Removed (a) categories (b) inclusions (c) literal names
-- Made suitable for pecan-paper.

-- Rules
grammar = skip @nil (rule @2list)+ #end <>
rule = #id id equals expression @2rule newline skip

-- Expressions
expression = term (slash expression @2or)?
term = factor (term @2and)?
factor = #atom atom (repeat / lookahead)*
repeat = opt @2opt / any @2any / some @2some
lookahead = has @2has / not @2not
atom = bracketed / see / id / act / mark / tag /
    range / set / string / split / point

-- Atoms
bracketed = open expression close @3bracketed
see = sopen expression sclose @3see
id = letter alpha* @id blank
act = '@' decimal? name? @act blank
mark = "#" #name name @mark blank
tag = "%" #name name @tag blank
range = ["'" noquote ".."] noquote #squote "'" @range blank
set = "'" noquote* #squote "'" @set blank
string = '"' nodquote* #dquote '"' @string blank
split = '<' noangle* #gt '>' @split blank
equals = #equals "=" gap
slash = #operator "/" gap
has = "&" @op blank
not = "!" @op blank
opt = "?" @op blank
any = "*" @op blank
some = "+" @op blank
open = "(" @bracket gap
sopen = "[" @bracket gap
close = #bracket ")" @bracket blank
sclose = #bracket "]" @bracket blank
point = "." @point blank

-- White space and continuations.
blank = space* [endline space* '=/)]' &]? @
gap = space* (newline space*)? @
skip = (space / comment / newline)* @
comment = "--" (' ..~')* newline
newline = #newline endline @

-- Character sets and sequences
space = ' '
literal = escape / ' ..~'
escape = '\b' #digit (hex / decimal)
alpha = letter / '0..9' / '-'
letter = 'a..z' / 'A..Z' / '_'
name = letter alpha*
hex = '0' ('0..9' / 'a..f' / 'A..F')*
decimal = '0' / ('1..9' '0..9'*)
noquote = "'"! literal
nodquote = '"'! literal
noangle = '>'! literal
endline = '\r'? '\n'

==========
-- Single rule
x = y
----------
nil
id x
id y
rule
list
==========
-- Choice
x = y / z
----------
nil
id x
id y
id z
or
rule
list
==========
-- Bracket
x = (y / z)
----------
nil
id x
bracket (
id y
id z
or
bracket )
bracketed
rule
list
==========
-- Empty grammar
----------
Error in pecan1.txt, line 99: expecting id, newline
----------
^
==========
-- Expecting =
x
----------
Error in pecan1.txt, line 105: expecting equals
x
 ^
==========
-- Two rules, normal \bn line endings
x = x
y = y
----------
nil
id x
id x
rule
list
id y
id y
rule
list
==========
-- Windows line endings
x=x\r\n
y=y\r\n
----------
nil
id x
id x
rule
list
id y
id y
rule
list
==========
-- Blank lines


x = x
----------
nil
id x
id x
rule
list
==========
-- Trailing spaces
x = x    \n
         \n
y = y    \n
----------
nil
id x
id x
rule
list
id y
id y
rule
list
==========
-- Trailing blank lines
x = x
y = y


----------
nil
id x
id x
rule
list
id y
id y
rule
list
==========
-- No final newline
x = x
y = \121
----------
Error in pecan1.txt, line 183: expecting atom, newline, operator
y = \121
     ^
==========
-- No final newline
x = x
-- comment\32
----------
Error in pecan1.txt, line 191: expecting newline
-- comment\32
           ^
==========
-- Varied comments and empty lines
-- initial comment

x = y

-- middle comment
y = z

-- end comment
----------
nil
id x
id y
rule
list
id y
id z
rule
list
==========
-- Illegal end of line comment
x = y -- comment
----------
Error in pecan1.txt, line 218: expecting atom, newline, operator
x = y -- comment
      ^
==========
-- Unexpected character
x = |y|
----------
Error in pecan1.txt, line 225: expecting atom, newline
x = |y|
    ^
==========
-- Incomplete string
x = "abc
----------
Error in pecan1.txt, line 232: expecting dquote
x = "abc
        ^
==========
-- Incomplete set
x = 'abc
----------
Error in pecan1.txt, line 239: expecting squote
x = 'abc
        ^
==========
-- Expecting atom
x = /
----------
Error in pecan1.txt, line 246: expecting atom, newline
x = /
    ^
==========
-- Missing close bracket
x = (y
y = z
----------
Error in pecan1.txt, line 253: expecting atom, bracket, operator
x = (y
      ^
==========
-- Dot as any character
x = .
----------
nil
id x
point .
rule
list
==========
-- Incomplete dot dot
x = '0.'
----------
nil
id x
set '0.'
rule
list
==========
-- Drop input and output items.
x = @3
----------
nil
id x
act @3
rule
list
==========
-- Long id and id extending category name
longIdentifier = longIdentifier
x = Ndx
----------
nil
id longIdentifier
id longIdentifier
rule
list
id x
id Ndx
rule
list
==========
-- Tag
x = %x
----------
nil
id x
tag %x
rule
list
==========
-- Bad tag
x = %
----------
Error in pecan1.txt, line 311: expecting name
x = %
     ^
==========
-- Marker
x = #m
----------
nil
id x
mark #m
rule
list
==========
-- Bad marker
x = 'x' #3
----------
Error in pecan1.txt, line 327: expecting name
x = 'x' #3
         ^
==========
-- Brackets
exp = (exp) end
exp = [exp] end
----------
nil
id exp
bracket (
id exp
bracket )
bracketed
id end
and
rule
list
id exp
bracket [
id exp
bracket ]
see
id end
and
rule
list
==========
-- Continuation lines
x =
y /
z
x =
(
a) [
c]
x
= y
/ z
x
= y (a
) [c
]
----------
nil
id x
id y
id z
or
rule
list
id x
bracket (
id a
bracket )
bracketed
bracket [
id c
bracket ]
see
and
rule
list
id x
id y
id z
or
rule
list
id x
id y
bracket (
id a
bracket )
bracketed
bracket [
id c
bracket ]
see
and
and
rule
list
==========
-- The + * ? postfix operators
exp = exp* exp+ exp? end
----------
nil
id exp
id exp
op *
any
id exp
op +
some
id exp
op ?
opt
id end
and
and
and
rule
list
==========
-- Ranges
r1 = '\b0..\b127'
r2 = 'a..z'
----------
nil
id r1
range '\0..\127'
rule
list
id r2
range 'a..z'
rule
list
==========
-- Error marker
assignment = left #equals "=" right
----------
nil
id assignment
id left
mark #equals
string "="
id right
and
and
and
rule
list
==========
-- Double operator
x = y /
z / /
----------
Error in pecan1.txt, line 465: expecting atom, newline
z / /
    ^
==========
-- Actions, tests, codes and errors
x = %x @0x @1x @ @x
y = '\b0' '\b1' '\b2' '\b10' '\b12' '\b123'
u = #err ''
----------
nil
id x
tag %x
act @0x
act @1x
act @
act @x
and
and
and
and
rule
list
id y
set '\0'
set '\1'
set '\2'
set '\10'
set '\12'
set '\123'
and
and
and
and
and
rule
list
id u
mark #err
set ''
and
rule
list
==========
-- Strings, character sets
x = "abc" " !#$%^&*()_-=+[]`{};:'@#~"
y = 'abc' ' !#$%^&*()_-=+[]`{};:"@#~'
----------
nil
id x
string "abc"
string " !#$%^&*()_-=+[]`{};:'@#~"
and
rule
list
id y
set 'abc'
set ' !#$%^&*()_-=+[]`{};:"@#~'
and
rule
list
==========
-- Brackets and operators
x = (y / z) / y?
x = (y/z)+ / y*
x = y z w ! / y
x = [y z] / w
----------
nil
id x
bracket (
id y
id z
or
bracket )
bracketed
id y
op ?
opt
or
rule
list
id x
bracket (
id y
id z
or
bracket )
bracketed
op +
some
id y
op *
any
or
rule
list
id x
id y
id z
id w
op !
not
and
and
id y
or
rule
list
id x
bracket [
id y
id z
and
bracket ]
see
id w
or
rule
list
==========
-- Dividers
keyword = <df> keyword1 / keyword2
keyword1 = "break" / "case" / "catch" / "continue" / "default"
keyword2 = "do" / "else" / "for" / "if" / "switch" / "while"
----------
nil
id keyword
split <df>
id keyword1
and
id keyword2
or
rule
list
id keyword1
string "break"
string "case"
string "catch"
string "continue"
string "default"
or
or
or
or
rule
list
id keyword2
string "do"
string "else"
string "for"
string "if"
string "switch"
string "while"
or
or
or
or
or
rule
list
==========
-- End of input
end = #end <>
----------
nil
id end
mark #end
split <>
and
rule
list
==========
-- Underscore
a_b = xy_
----------
nil
id a_b
id xy_
rule
list
==========
-- Hyphen
a-b = xy-
----------
nil
id a-b
id xy-
rule
list
