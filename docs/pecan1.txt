-- Pecan grammar for Pecan grammars.
-- Removed (a) categories (b) inclusions (c) backquotes (d) hex
-- Made suitable for pecan-paper.

-- Rules
grammar = skip rules #end <>
rules = rule (rules / @empty) @2list
rule = #id id equals expression @2rule newline skip

-- Expressions
expression = term (slash expression @2or)?
term = factor (term @2and)?
factor = #atom atom (repeat / lookahead)*
repeat = opt @2opt / any @2any / some @2some
lookahead = has @2has / not @2not
atom = bracketed / try / id / act / mark / tag /
    codes / code / range / set / string / split

-- Atoms
bracketed = open expression close @3bracketed
try = sopen expression sclose @3try
id = letter alpha* @id blank
act = '@' digits? alpha* @act blank
mark = "#" initial alpha* @mark blank
tag = "%" initial alpha* @tag blank
codes = [digits '.'] #dot '.' digits @codes blank
code = digits @code blank
range = ["'" noquote ".."] noquote #quote "'" @range blank
set = "'" noquote* #quote "'" @set blank
string = '"' nodquote* #quote '"' @string blank
split = '<' noangle* #gt '>' @split blank
equals = #equals "=" gap
slash = #operator "/" gap
has = "&" @op blank
not = "!" @op blank
opt = "?" @op blank
any = "*" @op blank
some = "+" @op blank
open = "(" @bracket gap
sopen = "[" @bracket gap
close = #bracket ")" @bracket blank
sclose = #bracket "]" @bracket blank

-- White space and continuations.
blank = space* [endline space* '=/)]' &]? @
gap = space* (newline space*)? @
skip = (space / comment / newline)* @
comment = "--" visible* newline
newline = #newline endline @

-- Character sets.
space = ' '
visible = ' ..~'
alpha = letter / '0..9' / '_' / '-'
initial = #letter letter
letter = 'a..z' / 'A..Z'
digits = '0' / ('1..9' '0..9'*)
noquote = "'"! visible
nodquote = '"'! visible
noangle = '>'! visible
endline = 13? 10

==========
-- Single rule
x = y
----------
id x
id y
rule
empty
list
==========
-- Choice
x = y / z
----------
id x
id y
id z
or
rule
empty
list
==========
-- Bracket
x = (y / z)
----------
id x
bracket (
id y
id z
or
bracket )
bracketed
rule
empty
list
==========
-- Empty grammar
----------
Error in pecan1.txt, line 99: expecting id, newline

^
==========
-- Expecting =
x
----------
Error in pecan1.txt, line 105: expecting equals
x
 ^
==========
-- Two rules, normal \n line endings
x = x
y = y
---------
id x
id x
rule
id y
id y
rule
empty
list
list
==========
-- Windows \r\n line endings
x=x\13\10\
y=y\13\10\
----------
id x
id x
rule
id y
id y
rule
empty
list
list
==========
-- Blank lines


x = x
----------
id x
id x
rule
empty
list
==========
-- Trailing spaces
x = x    \10
         \10
y = y    \10
----------
id x
id x
rule
id y
id y
rule
empty
list
list
==========
-- Trailing blank lines
x = x
y = y


----------
id x
id x
rule
id y
id y
rule
empty
list
list
==========
-- No final newline
x = x
y = y\
----------
id x
id x
rule
id y
id y
rule
empty
list
list
==========
-- No final newline
x = x
-- comment\
----------
id x
id x
rule
empty
list
==========
-- Varied comments and empty lines
-- initial comment

x = y

-- middle comment
y = z

-- end comment
----------
id x
id y
rule
id y
id z
rule
empty
list
list
==========
-- Illegal end of line comment
x = y -- comment
----------
Error in pecan1.txt, line 226: expecting atom, newline, operator
x = y -- comment
      ^
==========
-- Unexpected character
x = |y|
----------
Error in pecan1.txt, line 233: expecting atom, newline
x = |y|
    ^
==========
-- Incomplete string
x = "abc
----------
Error in pecan1.txt, line 240: expecting quote
x = "abc
        ^
==========
-- Incomplete set
x = 'abc
----------
Error in pecan1.txt, line 247: expecting quote
x = 'abc
        ^
==========
-- Expecting atom
x = /
----------
Error in pecan1.txt, line 254: expecting atom, newline
x = /
    ^
==========
-- Missing close bracket
x = (y
y = z
----------
Error in pecan1.txt, line 261: expecting atom, bracket, operator
x = (y
      ^
==========
-- Dot in the wrong place
x = .
----------
Error in pecan1.txt, line 269: expecting atom, newline
x = .
    ^
==========
-- Incomplete dot dot
x = 0.
----------
Error in pecan1.txt, line 276: expecting dot
x = 0.
      ^
==========
-- Drop input and output items.
x = @3
----------
id x
act @3
rule
empty
list
==========
-- Long id and id extending category name
longIdentifier = longIdentifier
x = Ndx
----------
id longIdentifier
id longIdentifier
rule
id x
id Ndx
rule
empty
list
list
==========
-- Tag
x = %x
----------
id x
tag %x
rule
empty
list
==========
-- Bad tag
x = %
----------
Error in pecan1.txt, line 315: expecting letter
x = %
     ^
==========
-- Marker
x = #m
----------
id x
mark #m
rule
empty
list
==========
-- Bad marker
x = 'x' #3
----------
Error in pecan1.txt, line 331: expecting letter
x = 'x' #3
         ^
==========
-- Brackets
exp = (exp) end
exp = [exp] end
----------
id exp
bracket (
id exp
bracket )
bracketed
id end
and
rule
id exp
bracket [
id exp
bracket ]
try
id end
and
rule
empty
list
list
==========
-- Continuation lines
x =
y /
z
x =
(
a) [
c]
x
= y
/ z
x
= y (a
) [c
]
----------
id x
id y
id z
or
rule
id x
bracket (
id a
bracket )
bracketed
bracket [
id c
bracket ]
try
and
rule
id x
id y
id z
or
rule
id x
id y
bracket (
id a
bracket )
bracketed
bracket [
id c
bracket ]
try
and
and
rule
empty
list
list
list
list
==========
-- The + * ? postfix operators
exp = exp* exp+ exp? end
----------
id exp
id exp
op *
any
id exp
op +
some
id exp
op ?
opt
id end
and
and
and
rule
empty
list
==========
-- Ranges
r1 = 0..127
r2 = 'a..z'
----------
id r1
codes 0..127
rule
id r2
range 'a..z'
rule
empty
list
list
==========
-- Error marker
assignment = left #equals "=" right
----------
id assignment
id left
mark #equals
string "="
id right
and
and
and
rule
empty
list
==========
-- Double operator
x = y /
z / /
----------
Error in pecan1.txt, line 469: expecting atom, newline
z / /
    ^
==========
-- Actions, tests, codes and errors
x = %x @0x @1x @ @x
y = 0 1 2 10 12 123
u = #err ''
----------
id x
tag %x
act @0x
act @1x
act @
act @x
and
and
and
and
rule
id y
code 0
code 1
code 2
code 10
code 12
code 123
and
and
and
and
and
rule
id u
mark #err
set ''
and
rule
empty
list
list
list
==========
-- Strings, character sets
x = "abc" " !#$%^&*()_-=+[]`{};:'@#~"
y = 'abc' ' !#$%^&*()_-=+[]`{};:"@#~'
----------
id x
string "abc"
string " !#$%^&*()_-=+[]`{};:'@#~"
and
rule
id y
set 'abc'
set ' !#$%^&*()_-=+[]`{};:"@#~'
and
rule
empty
list
list
==========
-- Brackets and operators
x = (y / z) / y?
x = (y/z)+ / y*
x = y z w ! / y
x = [y z] / w
----------
id x
bracket (
id y
id z
or
bracket )
bracketed
id y
op ?
opt
or
rule
id x
bracket (
id y
id z
or
bracket )
bracketed
op +
some
id y
op *
any
or
rule
id x
id y
id z
id w
op !
not
and
and
id y
or
rule
id x
bracket [
id y
id z
and
bracket ]
try
id w
or
rule
empty
list
list
list
list
==========
-- Dividers
keyword = <df> keyword1 / keyword2
keyword1 = "break" / "case" / "catch" / "continue" / "default"
keyword2 = "do" / "else" / "for" / "if" / "switch" / "while"
----------
id keyword
split <df>
id keyword1
and
id keyword2
or
rule
id keyword1
string "break"
string "case"
string "catch"
string "continue"
string "default"
or
or
or
or
rule
id keyword2
string "do"
string "else"
string "for"
string "if"
string "switch"
string "while"
or
or
or
or
or
rule
empty
list
list
list
==========
-- End of input
end = #end <>
----------
id end
mark #end
split <>
and
rule
empty
list
==========
-- Underscore
a_b = xy_
----------
id a_b
id xy_
rule
empty
list
==========
-- Hyphen
a-b = xy-
----------
id a-b
id xy-
rule
empty
list
==========
-- Single backslash in quotes (escaped using test file conventions)
bs = '\\n' "\\n"
----------
id bs
set '\\n'
string "\\n"
and
rule
empty
list
