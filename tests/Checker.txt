-- Empty string: succeeds without progressing
x = ""
----------
Rule x = "" CI,SN
  Id x SN
  Success "" SN
==========
-- Empty set: fails without progressing
x = ''
----------
Rule x = '' CI,FN
  Id x FN
  Fail '' FN
==========
-- Character code: succeeds and progresses or fails without progressing
x = 42
----------
Rule x = 42 CI,FN,SP
  Id x FN,SP
  Code 42 FN,SP
==========
-- Strings: FN,SP
x = "a" "ab"
----------
Rule x = "a" "ab" CI,FN,SP,FP
  Id x FN,SP,FP
  And "a" "ab" FN,SP,FP
    Char "a" FN,SP
    String "ab" FN,SP
==========
-- Sets: SP or FN
x = 'a' 'ab'
----------
Rule x = 'a' 'ab' CI,FN,SP,FP
  Id x FN,SP,FP
  And 'a' 'ab' FN,SP,FP
    Char 'a' FN,SP
    Set 'ab' FN,SP
==========
-- Empty string then empty string: SN
x = "" ""
----------
Rule x = "" "" CI,SN
  Id x SN
  And "" "" SN
    Success "" SN
    Success "" SN
==========
-- Normal rule without recursion
x = 'a'
----------
Rule x = 'a' CI,FN,SP
  Id x FN,SP
  Char 'a' FN,SP
==========
-- Simple left recursive rule
x = x 'a'
----------
Error in tests/Checker.txt, line 57: potential infinite loop
x = x 'a'
^
==========
-- Mutual recursion
x = y "abc"
z = "123"
y = x "ABC"
----------
Error in tests/Checker.txt, line 64: potential infinite loop
x = y "abc"
^
==========
-- Mutual recursion masked by optional expression
x = "a" ? y
y = "A" ? x "ABC"
----------
Error in tests/Checker.txt, line 73: potential infinite loop
x = "a" ? y
^
==========
-- Mutual recursion masked by remote optional expression
x = a y
z = "123"
y = "A" ? x "ABC"
a = b
b = c
c = "a" ?
----------
Error in tests/Checker.txt, line 81: potential infinite loop
x = a y
^
==========
-- Text input and token input
x = [%a] 'b'
----------
Error in tests/Checker.txt, line 93: there is both text and token input
x = [%a] 'b'
^^^^^^^^^^^^
==========
-- Try: FN,SP,FP
x = [%a] %b
----------
Rule x = [%a] %b TI,FN,SP,FP
  Id x FN,SP,FP
  And [%a] %b FN,SP,FP
    Try [%a] FN,SP
      Tag %a FN,SP
    Tag %b FN,SP
==========
-- Positive lookahead: SN,FN
x = (%a)& %b
----------
Rule x = (%a)& %b TI,FN,SP
  Id x FN,SP
  And (%a)& %b FN,SP
    Has (%a)& SN,FN
      Tag %a FN,SP
    Tag %b FN,SP
==========
-- Negative lookahead: SN,FN
x = (%a)! %b
----------
Rule x = (%a)! %b TI,FN,SP
  Id x FN,SP
  And (%a)! %b FN,SP
    Not (%a)! SN,FN
      Tag %a FN,SP
    Tag %b FN,SP
==========
-- Action on left of choice (legal in Pecan 5, warning when compiling)
x = @a 'a' / 'b'
----------
Rule x = @a 'a' / 'b' CI,FN,SP,AA,AB
  Id x FN,SP,AA,AB
  Or @a 'a' / 'b' FN,SP,AA,AB
    And @a 'a' FN,SP,AA,AB
      Act @a SN,AA,AB
      Char 'a' FN,SP
    Char 'b' FN,SP
==========
-- Expression which succeeds without progressing, repeated in an infinite loop
x = (@a @2b)*
----------
Error in tests/Checker.txt, line 141: potential infinite loop
x = (@a @2b)*
^
==========
-- Expressions
exp = term ('+' term @2add / '-' term @2sub)* 'eof'
term = factor ('*' factor @2mul / '/' factor @2div)*
factor = primary ('^' factor @2pow)?
primary = 'number' @number / '(' exp ')'
----------
List exp = term ('+' term @2add / '-' term @2sub)* 'eof'... CI
  Rule exp = term ('+' term @2add / '-' term @2sub)* 'eof' FN,SP,FP,AA
    Id exp FN,SP,FP,AA
    And term ('+' term @2add / '-' term @2sub)* 'eof' FN,SP,FP,AA
      Id term FN,SP,FP,AA
      Any ('+' term @2add / '-' term @2sub)* SN,SP,FP,AA
        Or '+' term @2add / '-' term @2sub FN,SP,FP,AA
          And '+' term @2add FN,SP,FP,AA
            Char '+' FN,SP
            Id term FN,SP,FP,AA
            Act @2add SN,AA,AB
          And '-' term @2sub FN,SP,FP,AA
            Char '-' FN,SP
            Id term FN,SP,FP,AA
            Act @2sub SN,AA,AB
      Set 'eof' FN,SP
  Rule term = factor ('*' factor @2mul / '/' factor @2div)* FN,SP,FP,AA
    Id term FN,SP,FP,AA
    And factor ('*' factor @2mul / '/' factor @2div)* FN,SP,FP,AA
      Id factor FN,SP,FP,AA
      Any ('*' factor @2mul / '/' factor @2div)* SN,SP,FP,AA
        Or '*' factor @2mul / '/' factor @2div FN,SP,FP,AA
          And '*' factor @2mul FN,SP,FP,AA
            Char '*' FN,SP
            Id factor FN,SP,FP,AA
            Act @2mul SN,AA,AB
          And '/' factor @2div FN,SP,FP,AA
            Char '/' FN,SP
            Id factor FN,SP,FP,AA
            Act @2div SN,AA,AB
  Rule factor = primary ('^' factor @2pow)? FN,SP,FP,AA
    Id factor FN,SP,FP,AA
    And primary ('^' factor @2pow)? FN,SP,FP,AA
      Id primary FN,SP,FP,AA
      Opt ('^' factor @2pow)? SN,SP,FP,AA
        And '^' factor @2pow FN,SP,FP,AA
          Char '^' FN,SP
          Id factor FN,SP,FP,AA
          Act @2pow SN,AA,AB
  Rule primary = 'number' @number / '(' exp ')' FN,SP,FP,AA
    Id primary FN,SP,FP,AA
    Or 'number' @number / '(' exp ')' FN,SP,FP,AA
      And 'number' @number FN,SP,AA
        Set 'number' FN,SP
        Act @number SN,AA,AB
      And '(' exp ')' FN,SP,FP,AA
        Char '(' FN,SP
        Id exp FN,SP,FP,AA
        Char ')' FN,SP
