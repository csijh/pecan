// Flags shown are SN,SP,FN,FP: can succeed/fail without/with progressing.
// Empty string: succeeds without progressing
x = ""
----------
Rule x 1000
  String "" 1000
==========
// Empty set: fails without progressing
x = ''
----------
Rule x 0010
  Set '' 0010
==========
// Numerical character: succeeds and progresses or fails without progressing
x = 42
----------
Rule x 0110
  Char 42 0110
==========
// String: SP or FN
x = "a"
----------
Rule x 0110
  String "a" 0110
==========
// Set: SP or FN
x = 'a'
----------
Rule x 0110
  Set 'a' 0110
==========
// Empty string then empty string: SN
x = "" ""
----------
Rule x 1000
  And "" "" 1000
    String "" 1000
    String "" 1000
==========
// Normal rule without recursion
x = 'a'
----------
Rule x 0110
  Set 'a' 0110
==========
// Simple left recursive rule
x = x 'a'
----------
Error on line 2: potential infinite loop
x = x 'a'
    ^
==========
// Mutual recursion
x = y "abc"
z = "123"
y = x "ABC"
----------
Error on line 2: potential infinite loop
x = y "abc"
    ^
==========
// Mutual recursion masked by optional expression
x = "a" ? y
y = "A" ? x "ABC"
----------
Error on line 2: potential infinite loop
x = "a" ? y
          ^
==========
// Mutual recursion masked by remote optional expression
x = a y
z = "123"
y = "A" ? x "ABC"
a = b
b = c
c = "a" ?
----------
Error on line 2: potential infinite loop
x = a y
      ^
==========
// Text input and token input
x = [%a] 'b'
----------
Error on line 2: there is both text and token input
x = [%a] 'b'
    ^^^^^^^^
==========
// Try: SP or FN or FP
x = [%a] %b
----------
Rule x 0111
  And [%a] %b 0111
    Try [%a] 0110
      Tag %a 0110
    Tag %b 0110
==========
// Positive lookahead: SP or FN
x = (%a)& %b
----------
Rule x 0110
  And (%a)& %b 0110
    Has (%a)& 1010
      Tag %a 0110
    Tag %b 0110
==========
// Negative lookahead: SP or FN
x = (%a)! %b
----------
Rule x 0110
  And (%a)! %b 0110
    Not (%a)! 1010
      Tag %a 0110
    Tag %b 0110
==========
// Action on left of choice (legal in Pecan 5)
x = @a 'a' / 'b'
----------
Rule x 0110
  Or @a 'a' / 'b' 0110
    And @a 'a' 0110
      Act @a 1000
      Set 'a' 0110
    Set 'b' 0110
==========
// Expression which succeeds without progressing, repeated in an infinite loop
x = (@a @2b)*
----------
Error on line 2: potential infinite loop
x = (@a @2b)*
    ^^^^^^^^^
==========
// Expressions
exp = term ('+' term @2add / '-' term @2sub)* 'eof'
term = factor ('*' factor @2mul / '/' factor @2div)*
factor = primary ('^' factor @2pow)?
primary = 'number' @number / '(' exp ')'
----------
Rule exp 0111
  And term ('+' term @2add / '-' term @2sub)* 'eof' 0111
    Id term 0111
    Many ('+' term @2add / '-' term @2sub)* 1101
      Or '+' term @2add / '-' term @2sub 0111
        And '+' term @2add 0111
          Set '+' 0110
          Id term 0111
          Act @2add 1000
        And '-' term @2sub 0111
          Set '-' 0110
          Id term 0111
          Act @2sub 1000
    Set 'eof' 0110
Rule term 0111
  And factor ('*' factor @2mul / '/' factor @2div)* 0111
    Id factor 0111
    Many ('*' factor @2mul / '/' factor @2div)* 1101
      Or '*' factor @2mul / '/' factor @2div 0111
        And '*' factor @2mul 0111
          Set '*' 0110
          Id factor 0111
          Act @2mul 1000
        And '/' factor @2div 0111
          Set '/' 0110
          Id factor 0111
          Act @2div 1000
Rule factor 0111
  And primary ('^' factor @2pow)? 0111
    Id primary 0111
    Opt ('^' factor @2pow)? 1101
      And '^' factor @2pow 0111
        Set '^' 0110
        Id factor 0111
        Act @2pow 1000
Rule primary 0111
  Or 'number' @number / '(' exp ')' 0111
    And 'number' @number 0110
      Set 'number' 0110
      Act @number 1000
    And '(' exp ')' 0111
      Set '(' 0110
      Id exp 0111
      Set ')' 0110
