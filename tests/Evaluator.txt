sum1.txt
==========
sum2.txt
==========
sum3.txt
==========
sum4.txt
==========
sum5.txt
==========
sum6.txt
==========
sum7.txt
==========
sum8.txt
==========
sum9.txt
==========
sum10.txt
==========
sum11.txt
==========
sum12.txt
==========
sum13.txt
==========
sum14.txt
==========
sum15.txt
==========
sum16a.txt
==========
sum16b.txt
==========
// Bad grammar
rule
==========
2
----------
Error on line 2: expecting equals
rule
    ^
==========
// Try succeeds
dots = ['.' '.'] @dots / '.' '3' @num
==========
..
----------
dots ..
==========
// Try fails
dots = ['.' '.'] @dots / '.' '3' @num
==========
.3
----------
num .3
==========
// String has a built-in try
op = "<=" @le / "<" @lt
==========
x
----------
Error on line 1:
x
^
==========
<=
----------
le <=
==========
<
----------
lt <
==========
// Error marker not reached
tokens = @tokens (token @2add)+ end
token = "x" @x / "y" @y / #err "z" @z
end = #newline 13? 10 @
==========
xyx
----------
tokens
x x
add
y y
add
x x
add
==========
// Error marker reached, but no error
tokens = @tokens (token @2add)+ end
token = "x" @x / "y" @y / #err "z" @z
end = #newline 13? 10 @
==========
z
----------
tokens
z z
add
==========
// Error marker reached, and reported
tokens = @tokens (token @2add)+ end
token = "x" @x / "y" @y / #err "z" @z
end = #newline 13? 10 @
==========

----------
Error on line 1: expecting err

^
==========
// Category succeeds or fails
token = Ll @letter
==========
x
----------
letter x
==========
X
----------
Error on line 1:
X
^
==========
// Scanner
tokens = @tokens token+
token = Ll @1lower / Lu @1upper
==========
xYz
----------
tokens
lower x
upper Y
lower z
==========
// Token parser using queries
sum = %num @num (%plus @ %num @num @2add)*
==========
id
----------
Error on line 1:
id
^
==========
num plus num
----------
num
num
add
==========
calculator = sum end
sum = term ("+" @ term @2add / "-" @ term @2subtract)*
term = atom ("*" @ atom @2multiply / "/" @ atom @2divide)*
atom = number / "(" @ sum ")" @
number = ('0..9')+ @number
end = 13? 10 @
==========
2+2
----------
number 2
number 2
add
==========
x = 'x' end @x
end = #end Uc!
==========
x
----------
Error on line 1: expecting end
x
 ^
==========
x\
----------
x x
==========
// Check that an action at the start of a left hand alternative is delayed so
// that it happens only if the alternative is chosen.
test = @left "0" / @right "1"
==========
0
----------
left
==========
1
----------
right
